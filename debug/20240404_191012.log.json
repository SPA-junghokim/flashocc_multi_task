{"env_info": "sys.platform: linux\nPython: 3.8.0 (default, Dec  9 2021, 17:53:27) [GCC 8.4.0]\nCUDA available: True\nGPU 0,1,2,3: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.1, V11.1.105\nGCC: x86_64-linux-gnu-gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.10.0+cu111\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX512\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.0+cu111\nOpenCV: 4.7.0\nMMCV: 1.5.3\nMMCV Compiler: GCC 7.5\nMMCV CUDA Compiler: 11.1\nMMDetection: 2.25.1\nMMSegmentation: 0.25.0\nMMDetection3D: 1.0.0rc4+\nspconv2.0: False", "config": "point_cloud_range = [-40.0, -40.0, -1.0, 40.0, 40.0, 5.4]\nclass_names = [\n    'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',\n    'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n]\ndataset_type = 'NuScenesDatasetOccpancy'\ndata_root = 'data/nuscenes/'\ninput_modality = dict(\n    use_lidar=False,\n    use_camera=True,\n    use_radar=False,\n    use_map=False,\n    use_external=False)\nfile_client_args = dict(backend='disk')\ntrain_pipeline = [\n    dict(\n        type='PrepareImageInputs',\n        is_train=True,\n        data_config=dict(\n            cams=[\n                'CAM_FRONT_LEFT', 'CAM_FRONT', 'CAM_FRONT_RIGHT',\n                'CAM_BACK_LEFT', 'CAM_BACK', 'CAM_BACK_RIGHT'\n            ],\n            Ncams=6,\n            input_size=(256, 704),\n            src_size=(900, 1600),\n            resize=(-0.06, 0.11),\n            rot=(-5.4, 5.4),\n            flip=True,\n            crop_h=(0.0, 0.0),\n            resize_test=0.0),\n        sequential=True),\n    dict(\n        type='LoadAnnotationsBEVDepth',\n        bda_aug_conf=dict(\n            rot_lim=(-0.0, 0.0),\n            scale_lim=(1.0, 1.0),\n            flip_dx_ratio=0.5,\n            flip_dy_ratio=0.5),\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        is_train=True),\n    dict(type='LoadOccGTFromFile', ignore_nonvisible=True),\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='PointToMultiViewDepth',\n        downsample=1,\n        grid_config=dict(\n            x=[-40, 40, 0.4],\n            y=[-40, 40, 0.4],\n            z=[-1, 5.4, 0.4],\n            depth=[1.0, 45.0, 0.5])),\n    dict(\n        type='DefaultFormatBundle3D',\n        class_names=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ]),\n    dict(\n        type='Collect3D',\n        keys=[\n            'img_inputs', 'gt_depth', 'voxel_semantics', 'mask_lidar',\n            'mask_camera'\n        ])\n]\ntest_pipeline = [\n    dict(\n        type='PrepareImageInputs',\n        data_config=dict(\n            cams=[\n                'CAM_FRONT_LEFT', 'CAM_FRONT', 'CAM_FRONT_RIGHT',\n                'CAM_BACK_LEFT', 'CAM_BACK', 'CAM_BACK_RIGHT'\n            ],\n            Ncams=6,\n            input_size=(256, 704),\n            src_size=(900, 1600),\n            resize=(-0.06, 0.11),\n            rot=(-5.4, 5.4),\n            flip=True,\n            crop_h=(0.0, 0.0),\n            resize_test=0.0),\n        sequential=False),\n    dict(\n        type='LoadAnnotationsBEVDepth',\n        bda_aug_conf=dict(\n            rot_lim=(-0.0, 0.0),\n            scale_lim=(1.0, 1.0),\n            flip_dx_ratio=0.5,\n            flip_dy_ratio=0.5),\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        is_train=False),\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(type='LoadOccGTFromFile'),\n    dict(\n        type='MultiScaleFlipAug3D',\n        img_scale=(1333, 800),\n        pts_scale_ratio=1,\n        flip=False,\n        transforms=[\n            dict(\n                type='DefaultFormatBundle3D',\n                class_names=[\n                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                    'traffic_cone'\n                ],\n                with_label=False),\n            dict(\n                type='Collect3D',\n                keys=[\n                    'points', 'img_inputs', 'voxel_semantics', 'mask_lidar',\n                    'mask_camera'\n                ])\n        ])\n]\neval_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=10,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='DefaultFormatBundle3D',\n        class_names=[\n            'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n            'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'\n        ],\n        with_label=False),\n    dict(type='Collect3D', keys=['points'])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=4,\n    train=dict(\n        type='NuScenesDatasetOccpancy',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/bevdetv2-nuscenes_infos_train_seg.pkl',\n        pipeline=[\n            dict(\n                type='PrepareImageInputs',\n                is_train=True,\n                data_config=dict(\n                    cams=[\n                        'CAM_FRONT_LEFT', 'CAM_FRONT', 'CAM_FRONT_RIGHT',\n                        'CAM_BACK_LEFT', 'CAM_BACK', 'CAM_BACK_RIGHT'\n                    ],\n                    Ncams=6,\n                    input_size=(256, 704),\n                    src_size=(900, 1600),\n                    resize=(-0.06, 0.11),\n                    rot=(-5.4, 5.4),\n                    flip=True,\n                    crop_h=(0.0, 0.0),\n                    resize_test=0.0),\n                sequential=True),\n            dict(\n                type='LoadAnnotationsBEVDepth',\n                bda_aug_conf=dict(\n                    rot_lim=(-0.0, 0.0),\n                    scale_lim=(1.0, 1.0),\n                    flip_dx_ratio=0.5,\n                    flip_dy_ratio=0.5),\n                classes=[\n                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                    'traffic_cone'\n                ],\n                is_train=True),\n            dict(type='LoadOccGTFromFile', ignore_nonvisible=True),\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='PointToMultiViewDepth',\n                downsample=1,\n                grid_config=dict(\n                    x=[-40, 40, 0.4],\n                    y=[-40, 40, 0.4],\n                    z=[-1, 5.4, 0.4],\n                    depth=[1.0, 45.0, 0.5])),\n            dict(\n                type='DefaultFormatBundle3D',\n                class_names=[\n                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                    'traffic_cone'\n                ]),\n            dict(\n                type='Collect3D',\n                keys=[\n                    'img_inputs', 'gt_depth', 'voxel_semantics', 'mask_lidar',\n                    'mask_camera'\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=False,\n            use_camera=True,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=False,\n        box_type_3d='LiDAR',\n        use_valid_flag=True,\n        stereo=False,\n        filter_empty_gt=False,\n        img_info_prototype='bevdet4d',\n        multi_adj_frame_id_cfg=(1, 1, 1)),\n    val=dict(\n        type='NuScenesDatasetOccpancy',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/bevdetv2-nuscenes_infos_val_seg.pkl',\n        pipeline=[\n            dict(\n                type='PrepareImageInputs',\n                data_config=dict(\n                    cams=[\n                        'CAM_FRONT_LEFT', 'CAM_FRONT', 'CAM_FRONT_RIGHT',\n                        'CAM_BACK_LEFT', 'CAM_BACK', 'CAM_BACK_RIGHT'\n                    ],\n                    Ncams=6,\n                    input_size=(256, 704),\n                    src_size=(900, 1600),\n                    resize=(-0.06, 0.11),\n                    rot=(-5.4, 5.4),\n                    flip=True,\n                    crop_h=(0.0, 0.0),\n                    resize_test=0.0),\n                sequential=False),\n            dict(\n                type='LoadAnnotationsBEVDepth',\n                bda_aug_conf=dict(\n                    rot_lim=(-0.0, 0.0),\n                    scale_lim=(1.0, 1.0),\n                    flip_dx_ratio=0.5,\n                    flip_dy_ratio=0.5),\n                classes=[\n                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                    'traffic_cone'\n                ],\n                is_train=False),\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(type='LoadOccGTFromFile'),\n            dict(\n                type='MultiScaleFlipAug3D',\n                img_scale=(1333, 800),\n                pts_scale_ratio=1,\n                flip=False,\n                transforms=[\n                    dict(\n                        type='DefaultFormatBundle3D',\n                        class_names=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        with_label=False),\n                    dict(\n                        type='Collect3D',\n                        keys=[\n                            'points', 'img_inputs', 'voxel_semantics',\n                            'mask_lidar', 'mask_camera'\n                        ])\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=False,\n            use_camera=True,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=True,\n        box_type_3d='LiDAR',\n        stereo=False,\n        filter_empty_gt=False,\n        img_info_prototype='bevdet4d',\n        multi_adj_frame_id_cfg=(1, 1, 1)),\n    test=dict(\n        type='NuScenesDatasetOccpancy',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/bevdetv2-nuscenes_infos_val_seg.pkl',\n        pipeline=[\n            dict(\n                type='PrepareImageInputs',\n                data_config=dict(\n                    cams=[\n                        'CAM_FRONT_LEFT', 'CAM_FRONT', 'CAM_FRONT_RIGHT',\n                        'CAM_BACK_LEFT', 'CAM_BACK', 'CAM_BACK_RIGHT'\n                    ],\n                    Ncams=6,\n                    input_size=(256, 704),\n                    src_size=(900, 1600),\n                    resize=(-0.06, 0.11),\n                    rot=(-5.4, 5.4),\n                    flip=True,\n                    crop_h=(0.0, 0.0),\n                    resize_test=0.0),\n                sequential=False),\n            dict(\n                type='LoadAnnotationsBEVDepth',\n                bda_aug_conf=dict(\n                    rot_lim=(-0.0, 0.0),\n                    scale_lim=(1.0, 1.0),\n                    flip_dx_ratio=0.5,\n                    flip_dy_ratio=0.5),\n                classes=[\n                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                    'traffic_cone'\n                ],\n                is_train=False),\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(type='LoadOccGTFromFile'),\n            dict(\n                type='MultiScaleFlipAug3D',\n                img_scale=(1333, 800),\n                pts_scale_ratio=1,\n                flip=False,\n                transforms=[\n                    dict(\n                        type='DefaultFormatBundle3D',\n                        class_names=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        with_label=False),\n                    dict(\n                        type='Collect3D',\n                        keys=[\n                            'points', 'img_inputs', 'voxel_semantics',\n                            'mask_lidar', 'mask_camera'\n                        ])\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=False,\n            use_camera=True,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=True,\n        box_type_3d='LiDAR',\n        stereo=False,\n        filter_empty_gt=False,\n        img_info_prototype='bevdet4d',\n        multi_adj_frame_id_cfg=(1, 1, 1)))\nevaluation = dict(\n    interval=1,\n    pipeline=[\n        dict(\n            type='PrepareImageInputs',\n            data_config=dict(\n                cams=[\n                    'CAM_FRONT_LEFT', 'CAM_FRONT', 'CAM_FRONT_RIGHT',\n                    'CAM_BACK_LEFT', 'CAM_BACK', 'CAM_BACK_RIGHT'\n                ],\n                Ncams=6,\n                input_size=(256, 704),\n                src_size=(900, 1600),\n                resize=(-0.06, 0.11),\n                rot=(-5.4, 5.4),\n                flip=True,\n                crop_h=(0.0, 0.0),\n                resize_test=0.0),\n            sequential=False),\n        dict(\n            type='LoadAnnotationsBEVDepth',\n            bda_aug_conf=dict(\n                rot_lim=(-0.0, 0.0),\n                scale_lim=(1.0, 1.0),\n                flip_dx_ratio=0.5,\n                flip_dy_ratio=0.5),\n            classes=[\n                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                'traffic_cone'\n            ],\n            is_train=False),\n        dict(\n            type='LoadPointsFromFile',\n            coord_type='LIDAR',\n            load_dim=5,\n            use_dim=5,\n            file_client_args=dict(backend='disk')),\n        dict(type='LoadOccGTFromFile'),\n        dict(\n            type='MultiScaleFlipAug3D',\n            img_scale=(1333, 800),\n            pts_scale_ratio=1,\n            flip=False,\n            transforms=[\n                dict(\n                    type='DefaultFormatBundle3D',\n                    class_names=[\n                        'car', 'truck', 'construction_vehicle', 'bus',\n                        'trailer', 'barrier', 'motorcycle', 'bicycle',\n                        'pedestrian', 'traffic_cone'\n                    ],\n                    with_label=False),\n                dict(\n                    type='Collect3D',\n                    keys=[\n                        'points', 'img_inputs', 'voxel_semantics',\n                        'mask_lidar', 'mask_camera'\n                    ])\n            ])\n    ],\n    start=24)\ncheckpoint_config = dict(interval=1, max_keep_ckpts=5)\nlog_config = dict(\n    interval=50,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nwork_dir = './debug'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nplugin = True\nplugin_dir = 'projects/mmdet3d_plugin/'\ndata_config = dict(\n    cams=[\n        'CAM_FRONT_LEFT', 'CAM_FRONT', 'CAM_FRONT_RIGHT', 'CAM_BACK_LEFT',\n        'CAM_BACK', 'CAM_BACK_RIGHT'\n    ],\n    Ncams=6,\n    input_size=(256, 704),\n    src_size=(900, 1600),\n    resize=(-0.06, 0.11),\n    rot=(-5.4, 5.4),\n    flip=True,\n    crop_h=(0.0, 0.0),\n    resize_test=0.0)\ngrid_config = dict(\n    x=[-40, 40, 0.4],\n    y=[-40, 40, 0.4],\n    z=[-1, 5.4, 0.4],\n    depth=[1.0, 45.0, 0.5])\nvoxel_size = [0.1, 0.1, 0.2]\nnumC_Trans = 32\nmulti_adj_frame_id_cfg = (1, 1, 1)\nnumC_Trans_cat = 0\nmodel = dict(\n    type='BEVDepth4D_MTL',\n    align_after_view_transfromation=False,\n    num_adj=0,\n    img_backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(2, 3),\n        frozen_stages=-1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=False,\n        with_cp=True,\n        style='pytorch',\n        pretrained='torchvision://resnet50'),\n    img_neck=dict(\n        type='CustomFPN',\n        in_channels=[1024, 2048],\n        out_channels=256,\n        num_outs=1,\n        start_level=0,\n        out_ids=[0]),\n    img_view_transformer=dict(\n        type='LSSViewTransformerBEVDepth',\n        grid_config=dict(\n            x=[-40, 40, 0.4],\n            y=[-40, 40, 0.4],\n            z=[-1, 5.4, 0.4],\n            depth=[1.0, 45.0, 0.5]),\n        input_size=(256, 704),\n        in_channels=256,\n        out_channels=32,\n        sid=False,\n        collapse_z=False,\n        downsample=16,\n        depthnet_cfg=dict(use_dcn=False, aspp_mid_channels=96)),\n    img_bev_encoder_backbone=dict(\n        type='CustomResNet3D',\n        numC_input=32,\n        num_layer=[1, 2, 4],\n        with_cp=False,\n        num_channels=[32, 64, 128],\n        stride=[1, 2, 2],\n        backbone_output_ids=[0, 1, 2]),\n    img_bev_encoder_neck=dict(\n        type='LSSFPN3D', in_channels=224, out_channels=32),\n    img_bev_encoder=dict(\n        type='CustomTriRes',\n        img_bev_encoder_backbone=dict(\n            type='CustomResNet', numC_input=32, num_channels=[32, 64, 128]),\n        img_bev_encoder_neck=dict(\n            type='LSSFPN2D', in_channels=224, out_channels=32),\n        grid_config=dict(\n            x=[-40, 40, 0.4],\n            y=[-40, 40, 0.4],\n            z=[-1, 5.4, 0.4],\n            depth=[1.0, 45.0, 0.5])),\n    occ_head=dict(\n        type='BEVOCCHead2D',\n        channel_down_for_3d=512,\n        in_dim=256,\n        out_dim=256,\n        Dz=16,\n        use_mask=True,\n        num_classes=18,\n        use_predicter=True,\n        class_wise=False,\n        loss_occ=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=False,\n            ignore_index=255,\n            loss_weight=1.0),\n        sololoss=True,\n        loss_weight=10),\n    det_loss_weight=1,\n    occ_loss_weight=1,\n    seg_loss_weight=1.0)\nbda_aug_conf = dict(\n    rot_lim=(-0.0, 0.0),\n    scale_lim=(1.0, 1.0),\n    flip_dx_ratio=0.5,\n    flip_dy_ratio=0.5)\nshare_data_config = dict(\n    type='NuScenesDatasetOccpancy',\n    data_root='data/nuscenes/',\n    classes=[\n        'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',\n        'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n    ],\n    modality=dict(\n        use_lidar=False,\n        use_camera=True,\n        use_radar=False,\n        use_map=False,\n        use_external=False),\n    stereo=False,\n    filter_empty_gt=False,\n    img_info_prototype='bevdet4d',\n    multi_adj_frame_id_cfg=(1, 1, 1))\ntest_data_config = dict(\n    pipeline=[\n        dict(\n            type='PrepareImageInputs',\n            data_config=dict(\n                cams=[\n                    'CAM_FRONT_LEFT', 'CAM_FRONT', 'CAM_FRONT_RIGHT',\n                    'CAM_BACK_LEFT', 'CAM_BACK', 'CAM_BACK_RIGHT'\n                ],\n                Ncams=6,\n                input_size=(256, 704),\n                src_size=(900, 1600),\n                resize=(-0.06, 0.11),\n                rot=(-5.4, 5.4),\n                flip=True,\n                crop_h=(0.0, 0.0),\n                resize_test=0.0),\n            sequential=False),\n        dict(\n            type='LoadAnnotationsBEVDepth',\n            bda_aug_conf=dict(\n                rot_lim=(-0.0, 0.0),\n                scale_lim=(1.0, 1.0),\n                flip_dx_ratio=0.5,\n                flip_dy_ratio=0.5),\n            classes=[\n                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                'traffic_cone'\n            ],\n            is_train=False),\n        dict(\n            type='LoadPointsFromFile',\n            coord_type='LIDAR',\n            load_dim=5,\n            use_dim=5,\n            file_client_args=dict(backend='disk')),\n        dict(type='LoadOccGTFromFile'),\n        dict(\n            type='MultiScaleFlipAug3D',\n            img_scale=(1333, 800),\n            pts_scale_ratio=1,\n            flip=False,\n            transforms=[\n                dict(\n                    type='DefaultFormatBundle3D',\n                    class_names=[\n                        'car', 'truck', 'construction_vehicle', 'bus',\n                        'trailer', 'barrier', 'motorcycle', 'bicycle',\n                        'pedestrian', 'traffic_cone'\n                    ],\n                    with_label=False),\n                dict(\n                    type='Collect3D',\n                    keys=[\n                        'points', 'img_inputs', 'voxel_semantics',\n                        'mask_lidar', 'mask_camera'\n                    ])\n            ])\n    ],\n    ann_file='data/nuscenes/bevdetv2-nuscenes_infos_val_seg.pkl',\n    type='NuScenesDatasetOccpancy',\n    data_root='data/nuscenes/',\n    classes=[\n        'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',\n        'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n    ],\n    modality=dict(\n        use_lidar=False,\n        use_camera=True,\n        use_radar=False,\n        use_map=False,\n        use_external=False),\n    stereo=False,\n    filter_empty_gt=False,\n    img_info_prototype='bevdet4d',\n    multi_adj_frame_id_cfg=(1, 1, 1))\nkey = 'test'\noptimizer = dict(type='AdamW', lr=0.0001, weight_decay=0.01)\noptimizer_config = dict(grad_clip=dict(max_norm=5, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=200,\n    warmup_ratio=0.001,\n    step=[24])\nrunner = dict(type='EpochBasedRunner', max_epochs=24)\ncustom_hooks = [\n    dict(type='MEGVIIEMAHook', init_updates=10560, priority='NORMAL')\n]\ngpu_ids = range(0, 1)\n", "seed": 0, "exp_name": "depth_occ_bevdet_flashhead.py"}
